// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cart Item renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CartItem />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <p
          className="pizzaName"
        >
          default pizza
        </p>,
        <p
          className="pizzaMaxToppings"
        >
          0
        </p>,
        <p
          className="pizzaBasePrice"
        >
          0
        </p>,
        <Button
          label="remove item"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "default pizza",
          "className": "pizzaName",
        },
        "ref": null,
        "rendered": "default pizza",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": 0,
          "className": "pizzaMaxToppings",
        },
        "ref": null,
        "rendered": 0,
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": 0,
          "className": "pizzaBasePrice",
        },
        "ref": null,
        "rendered": 0,
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "handleClick": undefined,
          "label": "remove item",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <p
            className="pizzaName"
          >
            default pizza
          </p>,
          <p
            className="pizzaMaxToppings"
          >
            0
          </p>,
          <p
            className="pizzaBasePrice"
          >
            0
          </p>,
          <Button
            label="remove item"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "default pizza",
            "className": "pizzaName",
          },
          "ref": null,
          "rendered": "default pizza",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 0,
            "className": "pizzaMaxToppings",
          },
          "ref": null,
          "rendered": 0,
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 0,
            "className": "pizzaBasePrice",
          },
          "ref": null,
          "rendered": 0,
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "handleClick": undefined,
            "label": "remove item",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
